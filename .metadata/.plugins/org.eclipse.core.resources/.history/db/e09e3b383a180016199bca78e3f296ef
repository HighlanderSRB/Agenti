package mdb;

import javax.jms.Connection;
import javax.jms.ConnectionFactory;
import javax.jms.MessageProducer;
import javax.jms.Queue;
import javax.jms.Session;
import javax.jms.TextMessage;
import javax.naming.Context;
import javax.naming.InitialContext;

import model.ACLMessage;

public class AgentMsgProducer {

	public static void startMsg(ACLMessage msg)
	{
		//		Properties p = new Properties();
		////	remote.connection.default.connect.options.org.xnio.Options.SASL_POLICY_NOANONYMOUS=false
		//p.put("remote.connections", "default");
		//p.put("endpoint.name", "client-endpoint");
		//p.put("remote.connection.default.host", "localhost");
		//p.put("remote.connection.default.port", "8080");
		//p.put("remote.connectionprovider.create.options.org.xnio.Options.SSL_ENABLED", "false");
		//p.put("remote.connection.default.connect.options.org.xnio.Options.SASL_POLICY_NOANONYMOUS", "false");
		//p.put("java.naming.factory.url.pkgs", "org.jboss.ejb.client.naming");
		//p.put("java.naming.factory.initial", "jboss.naming.remote.client.InitialContextFactory");
		//p.put("java.naming.provider.url", "http-remoting://localhost:8080");
		//Context context = new InitialContext(p);
		Context context = new InitialContext();
		ConnectionFactory cf = (ConnectionFactory) context
			.lookup("java:jboss/exported/jms/RemoteConnectionFactory");
		//ConnectionFactory cf = (ConnectionFactory) context
		//	.lookup("java:/ConnectionFactory");
		final Queue queue = (Queue) context
			.lookup("java:jboss/exported/jms/queue/agentQueue");
		context.close();
		//Connection connection = cf.createConnection("guest", "guestguest");
		Connection connection = cf.createConnection();
		final Session session = connection.createSession(false,
			Session.AUTO_ACKNOWLEDGE);
		
		connection.start();
		
		//MessageConsumer consumer = session.createConsumer(queue);
		//consumer.setMessageListener(mdb);
		
		TextMessage msg = session.createTextMessage(message);
		// The sent timestamp acts as the message's ID
		msg.setStringProperty("typeOfMessage", typeOfMessage);
		
		MessageProducer producer = session.createProducer(queue);
		producer.send(msg);
		
		//Thread.sleep(1000);
		//Message m = consumer.receive();
		//System.out.println(m.getStringProperty("received"));
		
		producer.close();
		//consumer.close();
		connection.stop();
	}
}
